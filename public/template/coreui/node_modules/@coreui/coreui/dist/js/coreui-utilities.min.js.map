{"version":3,"sources":["../../js/src/utilities/get-style.js","../../js/src/utilities/hex-to-rgb.js","../../js/src/utilities/hex-to-rgba.js","../../js/src/utilities/rgb-to-hex.js"],"names":["Object","entries","obj","ownProps","keys","i","length","resArray","Array","property","element","style","cssCustomProperties","root","document","body","match","Boolean","documentMode","styleSheets","filter","value","cssText","substring","cssRules","selectorText","split","forEach","name","trim","window","getComputedStyle","getPropertyValue","replace","color","Error","r","g","b","parseInt","opacity","rgb","toString","slice"],"mappings":";;;;;4LAwCKA,OAAOC,UACVD,OAAOC,QAAU,SAAUC,GAIzB,IAHA,IAAMC,EAAWH,OAAOI,KAAKF,GACzBG,EAAIF,EAASG,OACXC,EAAW,IAAIC,MAAMH,GACpBA,KACLE,EAASF,GAAK,CAACF,EAASE,GAAIH,EAAIC,EAASE,KAE3C,OAAOE,eAnBM,SAACE,EAAUC,GAC1B,IAAIC,EAtBEC,EACFC,OAoBkD,IAA5BH,IAAAA,EAAUI,SAASC,MAI3CJ,EAFmBF,EAJyBO,MAAM,WADjCC,QAAQH,SAASI,eADjB,IACkCJ,SAASI,cAlBxDN,EAAsB,GAER,KADhBC,EAAOb,OAAOC,QAAQa,SAASK,aAAaC,OAAO,SAACC,GAAD,MAA6D,UAAlDA,EAAM,GAAGC,QAAQC,UAAU,EAAG,QAAQjB,WAC/FA,SACPO,EAAOb,OAAOC,QAAQa,SAASK,cAEpBnB,OAAOC,QAAQY,EAAK,GAAG,GAAGW,UAAUJ,OAAO,SAACC,GAAD,MAAqC,0BAA1BA,EAAM,GAAGI,eACvD,GAAG,GAAGd,MAAMW,QACzBI,MAAM,KAAKC,QAAQ,SAAClB,GAC1B,GAAIA,EAAU,CACZ,IAAMmB,EAAOnB,EAASiB,MAAM,MAAM,GAC5BL,EAAQZ,EAASiB,MAAM,MAAM,GACnCd,EAAAA,KAAyBgB,EAAKC,QAAYR,EAAMQ,UAG7CjB,GAWuBH,GAEpBqB,OAAOC,iBAAiBrB,EAAS,MAAMsB,iBAAiBvB,GAAUwB,QAAQ,MAAO,IAE3F,OAAOtB,cC7BQ,SAACuB,GAChB,GAAqB,oBAAVA,EACT,MAAM,IAAIC,MAAM,4BAElB,IAIIC,EACAC,EACAC,EALJ,IADYJ,EAAMlB,MAAM,4BAEtB,MAAM,IAAImB,MAASD,EAAb,6BAeR,OAVqB,IAAjBA,EAAM5B,QACR8B,EAAIG,SAASL,EAAMX,UAAU,EAAG,GAAI,IACpCc,EAAIE,SAASL,EAAMX,UAAU,EAAG,GAAI,IACpCe,EAAIC,SAASL,EAAMX,UAAU,EAAG,GAAI,MAEpCa,EAAIG,SAASL,EAAMX,UAAU,EAAG,GAAI,IACpCc,EAAIE,SAASL,EAAMX,UAAU,EAAG,GAAI,IACpCe,EAAIC,SAASL,EAAMX,UAAU,EAAG,GAAI,KAGtC,QAAea,EAAf,KAAqBC,EAArB,KAA2BC,EAA3B,iBCrBgB,SAACJ,EAAOM,GACxB,QAD0C,IAAlBA,IAAAA,EAAU,KACb,oBAAVN,EACT,MAAM,IAAIC,MAAM,4BAElB,IAIIC,EACAC,EACAC,EALJ,IADYJ,EAAMlB,MAAM,4BAEtB,MAAM,IAAImB,MAASD,EAAb,6BAeR,OAVqB,IAAjBA,EAAM5B,QACR8B,EAAIG,SAASL,EAAMX,UAAU,EAAG,GAAI,IACpCc,EAAIE,SAASL,EAAMX,UAAU,EAAG,GAAI,IACpCe,EAAIC,SAASL,EAAMX,UAAU,EAAG,GAAI,MAEpCa,EAAIG,SAASL,EAAMX,UAAU,EAAG,GAAI,IACpCc,EAAIE,SAASL,EAAMX,UAAU,EAAG,GAAI,IACpCe,EAAIC,SAASL,EAAMX,UAAU,EAAG,GAAI,KAGtC,QAAea,EAAf,KAAqBC,EAArB,KAA2BC,EAA3B,KAAiCE,EAAU,IAA3C,gBCrBe,SAACN,GAChB,GAAqB,oBAAVA,EACT,MAAM,IAAIC,MAAM,4BAElB,IAAMM,EAAMP,EAAMlB,MAAM,wEACxB,IAAKyB,EACH,MAAM,IAAIN,MAASD,EAAb,6BAER,IAAME,EAAAA,IAAQG,SAASE,EAAI,GAAI,IAAIC,SAAS,IACtCL,EAAAA,IAAQE,SAASE,EAAI,GAAI,IAAIC,SAAS,IACtCJ,EAAAA,IAAQC,SAASE,EAAI,GAAI,IAAIC,SAAS,IAE5C,MAAA,IAAWN,EAAEO,OAAO,GAAKN,EAAEM,OAAO,GAAKL,EAAEK,OAAO","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * CoreUI Utilities (v2.0.0): get-style.js\n * Licensed under MIT (https://coreui.io/license)\n * --------------------------------------------------------------------------\n */\n\nconst getCssCustomProperties = () => {\n  const cssCustomProperties = {}\n  let root = Object.entries(document.styleSheets).filter((value) => value[1].cssText.substring(0, ':root'.length) === ':root')\n  if (root.length === 0) {\n    root = Object.entries(document.styleSheets)\n  }\n  const rule = Object.entries(root[0][1].cssRules).filter((value) => value[1].selectorText === '.ie-custom-properties')\n  const cssText = rule[0][1].style.cssText\n  cssText.split(';').forEach((property) => {\n    if (property) {\n      const name = property.split(': ')[0]\n      const value = property.split(': ')[1]\n      cssCustomProperties[`--${name.trim()}`] = value.trim()\n    }\n  })\n  return cssCustomProperties\n}\n\nconst minIEVersion = 10\nconst isIE1x = () => Boolean(document.documentMode) && document.documentMode >= minIEVersion\nconst isCustomProperty = (property) => property.match(/^--.*/i)\n\nconst getStyle = (property, element = document.body) => {\n  let style\n  if (isCustomProperty(property) && isIE1x()) {\n    const cssCustomProperties = getCssCustomProperties()\n    style = cssCustomProperties[property]\n  } else {\n    style = window.getComputedStyle(element, null).getPropertyValue(property).replace(/^\\s/, '')\n  }\n  return style\n}\n\nif (!Object.entries) {\n  Object.entries = function (obj) {\n    const ownProps = Object.keys(obj)\n    let i = ownProps.length\n    const resArray = new Array(i)\n    while (i--) {\n      resArray[i] = [ownProps[i], obj[ownProps[i]]]\n    }\n    return resArray\n  }\n}\n\nexport default getStyle\n","/**\n * --------------------------------------------------------------------------\n * CoreUI Utilities (v2.0.0): hex-to-rgb.js\n * Licensed under MIT (https://coreui.io/license)\n * --------------------------------------------------------------------------\n */\n\n/* eslint-disable no-magic-numbers */\nconst hexToRgb = (color) => {\n  if (typeof color === 'undefined') {\n    throw new Error('Hex color is not defined')\n  }\n  const hex = color.match(/^#(?:[0-9a-f]{3}){1,2}$/i)\n  if (!hex) {\n    throw new Error(`${color} is not a valid hex color`)\n  }\n  let r\n  let g\n  let b\n  if (color.length === 7) {\n    r = parseInt(color.substring(1, 3), 16)\n    g = parseInt(color.substring(3, 5), 16)\n    b = parseInt(color.substring(5, 7), 16)\n  } else {\n    r = parseInt(color.substring(1, 2), 16)\n    g = parseInt(color.substring(2, 3), 16)\n    b = parseInt(color.substring(3, 5), 16)\n  }\n\n  return `rgba(${r}, ${g}, ${b})`\n}\n\nexport default hexToRgb\n","/**\n * --------------------------------------------------------------------------\n * CoreUI Utilities (v2.0.0): hex-to-rgba.js\n * Licensed under MIT (https://coreui.io/license)\n * --------------------------------------------------------------------------\n */\n\n/* eslint-disable no-magic-numbers */\nconst hexToRgba = (color, opacity = 100) => {\n  if (typeof color === 'undefined') {\n    throw new Error('Hex color is not defined')\n  }\n  const hex = color.match(/^#(?:[0-9a-f]{3}){1,2}$/i)\n  if (!hex) {\n    throw new Error(`${color} is not a valid hex color`)\n  }\n  let r\n  let g\n  let b\n  if (color.length === 7) {\n    r = parseInt(color.substring(1, 3), 16)\n    g = parseInt(color.substring(3, 5), 16)\n    b = parseInt(color.substring(5, 7), 16)\n  } else {\n    r = parseInt(color.substring(1, 2), 16)\n    g = parseInt(color.substring(2, 3), 16)\n    b = parseInt(color.substring(3, 5), 16)\n  }\n\n  return `rgba(${r}, ${g}, ${b}, ${opacity / 100})`\n}\n\nexport default hexToRgba\n","/**\n * --------------------------------------------------------------------------\n * CoreUI (v2.0.0): rgb-to-hex.js\n * Licensed under MIT (https://coreui.io/license)\n * --------------------------------------------------------------------------\n */\n\n/* eslint-disable no-magic-numbers */\nconst rgbToHex = (color) => {\n  if (typeof color === 'undefined') {\n    throw new Error('Hex color is not defined')\n  }\n  const rgb = color.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i)\n  if (!rgb) {\n    throw new Error(`${color} is not a valid rgb color`)\n  }\n  const r = `0${parseInt(rgb[1], 10).toString(16)}`\n  const g = `0${parseInt(rgb[2], 10).toString(16)}`\n  const b = `0${parseInt(rgb[3], 10).toString(16)}`\n\n  return `#${r.slice(-2)}${g.slice(-2)}${b.slice(-2)}`\n}\n\nexport default rgbToHex\n"]}